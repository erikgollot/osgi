package com.zenika.formation.osgi.service.consumer.internal;

import java.util.ArrayList;
import java.util.Dictionary;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.List;

import javax.servlet.Servlet;
import javax.servlet.ServletException;

import org.osgi.framework.Bundle;
import org.osgi.framework.BundleActivator;
import org.osgi.framework.BundleContext;
import org.osgi.framework.BundleEvent;
import org.osgi.framework.ServiceReference;
import org.osgi.service.http.HttpService;
import org.osgi.service.http.NamespaceException;
import org.osgi.service.log.LogService;
import org.osgi.util.tracker.BundleTracker;
import org.osgi.util.tracker.ServiceTracker;
import org.osgi.util.tracker.ServiceTrackerCustomizer;

public class Activator implements BundleActivator {
	ServiceReference<LogService> sr = null;
	ServiceTracker<LogService, LogService> tracker = null;
	ServiceReference<HttpService> httpServiceRef = null;
	HttpService http = null;
	Hashtable<Long, List<String>> servletAlias = new Hashtable<Long, List<String>>();

	@Override
	public void start(BundleContext context) throws Exception {
		// sr = context.getServiceReference(LogService.class);
		// if (sr != null) {
		// LogService log = context.getService(sr);
		// log.log(1, "Coucou c'est erik et ça marche, from bundle "
		// + context.getBundle().getBundleId());
		// }

		TrackerCustom custom = new TrackerCustom();
		custom.setContext(context);

		tracker = new ServiceTracker<LogService, LogService>(
				context,
				context.createFilter("(&(objectClass=org.osgi.service.log.LogService)(nature=basic))"),
				(ServiceTrackerCustomizer<LogService, LogService>) custom);

		tracker.open();
		// LogService ls = tracker.getService();
		// ls.log(1, "Coucou c'est erik et ça marche, from bundle "
		// + context.getBundle().getBundleId());

		BundleTracker<String> bTrack = new BundleTracker<String>(context,
				Bundle.ACTIVE, null) {

			@Override
			public String addingBundle(Bundle bundle, BundleEvent event) {
				System.out.println("track new bundle : "+bundle.getSymbolicName());
				httpServiceRef = context.getServiceReference(HttpService.class);
				System.out.println("get httpService = "+httpServiceRef);
				if (httpServiceRef != null) {
					http = context.getService(httpServiceRef);
					System.out.println("httpService= "+http);
					Dictionary<String, String> headers = bundle.getHeaders();
					System.out.println("lookup headers");
					Enumeration it = headers.keys();
					while (it.hasMoreElements()) {
						String key = it.nextElement();
						if ("Servlet-Map".equals(key)) {
							System.out.println("split "+key);
							String servletDecls[] = key.split(",");

							for (int i = 0; i < servletDecls.length; i++) {
								String servletDecl = servletDecls[i];
								String stk2[] = servletDecl.split("=");
								String urlFragment = stk2[0];
								String servletName = stk2[1];
								try {
									System.out.println("register : "+urlFragment+" for class = "+servletName);
									http.registerServlet(urlFragment,
											(Servlet) Class
													.forName(servletName)
													.newInstance(), null, null);
									addAlias(bundle.getBundleId(), urlFragment);
								} catch (InstantiationException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								} catch (IllegalAccessException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								} catch (ClassNotFoundException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								} catch (ServletException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								} catch (NamespaceException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							}
						}
					}
					System.out.println("end lookup headers");
				}
				return bundle.toString();
			}

			@Override
			public void remove(Bundle bundle) {
				List<String> urls = servletAlias.get(bundle.getBundleId());
				if (urls != null) {
					for (String url : urls) {
						http.unregister(url);
					}
					servletAlias.remove(bundle.getBundleId());
				}
			}

		};

		bTrack.open();
	}

	protected void addAlias(long bundleId, String urlFragment) {
		List<String> urls = servletAlias.get(bundleId);
		if (urls == null) {
			urls = new ArrayList<String>();
			servletAlias.put(bundleId, urls);
		}
		urls.add(urlFragment);
	}

	@Override
	public void stop(BundleContext context) throws Exception {
		if (sr != null) {
			context.ungetService(sr);
		}
		if (tracker != null) {
			tracker.close();
		}

	}

}
